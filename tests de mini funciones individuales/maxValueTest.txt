.data

floatArray:     .float 50.53, 45.22
floatAr:	.float 40.5, 100.0

.text
main:
	la $a0, floatAr	#floatArray -> $a0
	
	jal maxValue
	
	li $v0, 1
	la $a0, ($v1)
	syscall			#imprime el numero mayor
	
	li $v0, 10      #sale del programa
	syscall


indexF:

	addi $sp, $sp, -12	#respalda las variables extras que van a ser usadas en la funcion
	sw $t1, 0($sp)
	sw $ra, 4($sp)
	s.s $f1, 8($sp)

	sll $t1, $a1, 2		#t1 toma el valor del $a1(indice) * 4
	add $t1, $a0, $t1	#t1 toma el valor de la direccion de $a0(arreglo) mas $t1
	l.s $f1, 0($t1)		#f1 toma la direccion del elemento indexado
	mov.s $f0, $f1 		#retorno el valor indexado a $vo

	lw $t1, 0($sp)
	lw $ra, 4($sp)
	l.s $f1, 8($sp)
	addi $sp, $sp, 12

	jr $ra
	
maxValue:

	addi $sp, $sp, -20
	sw $s0, 0($sp)
	sw $ra, 4($sp)
	s.s $f0, 8($sp)
	s.s $f1, 12($sp)
	s.s $f2, 16($sp)	#respalda las variables extras que van a ser usadas en la funcion
	
	la $s0, ($a0)		#respalda el arreglo -> $s0
	
	li $a1, 0
    jal indexF
    mov.s $f1, $f0		#$f1 -> floatArray[0]
    	
    li $a1, 1
    la $a0, ($s0)
    jal indexF
    mov.s $f2, $f0		#$f2 -> floatArray[1]
	
	c.lt.s $f2, $f1		#compara si $f2 es menor que $f1
	bc1f segundo		#salta a segundo si $f2 es mayor
	li $v1, 0		#sino, guarda el indice de $f1
	j retorno
	
segundo:
	li $v1, 1		#guarda en $v0 el indice de $f2
	
retorno:
	lw $s0, 0($sp)
	lw $ra, 4($sp)	
	l.s $f0, 8($sp)
	l.s $f1, 12($sp)
	l.s $f2, 16($sp)
	addi $sp, $sp, 20
	
	jr $ra